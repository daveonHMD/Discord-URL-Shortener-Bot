"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class infinityRatelimit extends Error {
    constructor(status, respBody, response, retry, global) {
        super(`${status}: ${respBody.message || respBody}`);
        this.error = respBody.message || respBody;
        this.status = status;
        this.response = response;
        this.global = global;
        this._retry = retry;
    }
    async retry() {
        if (global) {
            let waitFor = this.retryAfter();
            throw new Error(`Global Ratelimit Exceeded. Wait ${waitFor} seconds`);
        }
        await new Promise(r => setTimeout(r, this.retryAfter()));
        return await this._retry();
    }
    retryAfter() {
        return parseFloat(this.response.headers.get('Retry-After') || '1000') + 2000;
    }
}
exports.default = infinityRatelimit;
