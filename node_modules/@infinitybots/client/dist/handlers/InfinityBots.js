"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfinityBots = void 0;
const node_fetch_1 = __importStar(require("node-fetch"));
const infinityError_1 = __importDefault(require("../errors/infinityError"));
const infinityRatelimit_1 = __importDefault(require("../errors/infinityRatelimit"));
const events_1 = require("events");
class InfinityBots extends events_1.EventEmitter {
    constructor(auth, options = {}) {
        super();
        this.options = {
            auth: auth,
            disableRatelimitHandler: options.disableRatelimitHandler || false,
            onlyEmit: options.onlyEmit || false,
            ...options,
        };
    }
    /**
     * Update options passed to client
     */
    setOptions(options) {
        this.options = {
            ...this.options,
            ...options,
        };
    }
    /**
     * The Base Request (PRIVATE)
     */
    async _request(method, path, body) {
        var _a;
        let tries = 1;
        while (tries <= 3) {
            const headers = new node_fetch_1.Headers();
            if (this.options.auth)
                headers.set('authorization', this.options.auth);
            if (method !== "GET")
                headers.set('Content-Type', 'application/json');
            let url = `https://spider.infinitybots.gg/${path}`;
            if (body && method === "GET")
                url += `${new URLSearchParams(body)}`;
            const response = await (0, node_fetch_1.default)(url, {
                method,
                headers,
                body: body && method !== "GET" ? JSON.stringify(body) : undefined,
            });
            let responseBody;
            if ((_a = response.headers.get('Content-Type')) === null || _a === void 0 ? void 0 : _a.startsWith("application/json")) {
                responseBody = await response.json();
            }
            else {
                responseBody = await response.text();
            }
            if (response.status == 429) {
                // Handle a 429 ratelimit
                let retryAfter = parseFloat(response.headers.get('Retry-After') || '1000');
                let global = response.headers.get("X-Global-Ratelimit") == "true";
                let error = new infinityRatelimit_1.default(response.status, responseBody, response, () => this._request(method, path, body), global);
                if (this.options.disableRatelimitHandler || tries === 3 || global) {
                    this.emit('ratelimit', error);
                    if (!this.options.onlyEmit)
                        throw error;
                }
                else {
                    this.emit('ratelimitWait', error);
                    await new Promise(r => setTimeout(r, retryAfter + 2000));
                    tries++;
                    continue;
                }
            }
            if (!response.ok) {
                let error = new infinityError_1.default(response.status, response.statusText, response);
                this.emit('error', error);
                if (!this.options.onlyEmit)
                    throw error;
            }
            return responseBody;
        }
    }
    async postBotStats(stats) {
        if (!stats) {
            throw new Error('[Infinity API] No Stats provided, Please provide a valid Client Server and Shard Count');
        }
        /* eslint-disable camelcase */
        await this._request("POST", `bots/stats`, {
            servers: stats.servers || 0,
            shards: stats.shards || 0,
            user_count: stats.users || 0,
        });
        /* eslint-enable camelcase */
        return stats;
    }
}
exports.InfinityBots = InfinityBots;
