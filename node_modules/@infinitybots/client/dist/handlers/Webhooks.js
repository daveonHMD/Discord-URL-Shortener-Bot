"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const raw_body_1 = __importDefault(require("raw-body"));
const url_1 = require("url");
class Webhook {
    constructor(auth, options = {}) {
        var _a;
        this.auth = auth;
        this.options = {
            error: (_a = options.error) !== null && _a !== void 0 ? _a : console.error,
        };
    }
    _formatIncoming(body) {
        var _a;
        const out = { ...body };
        if (((_a = body === null || body === void 0 ? void 0 : body.query) === null || _a === void 0 ? void 0 : _a.length) > 0)
            out.query = Object.fromEntries(new url_1.URLSearchParams(body.query));
        return out;
    }
    _parseRequest(req, res) {
        return new Promise((resolve) => {
            if (this.auth && req.headers.authorization !== this.auth)
                return res.status(403).json({ error: 'Unauthorized' });
            if (req.body)
                return resolve(this._formatIncoming(req.body));
            (0, raw_body_1.default)(req, {}, (error, body) => {
                if (error)
                    return res.status(422).json({ error: 'Malformed Request' });
                try {
                    const parsed = JSON.parse(body.toString('utf8'));
                    resolve(this._formatIncoming(parsed));
                }
                catch (err) {
                    res.status(400).json({ error: 'Invalid Request Body' });
                    resolve(false);
                }
            });
        });
    }
    hookListener(fn) {
        return async (req, res, next) => {
            var _a;
            const response = await this._parseRequest(req, res);
            if (!response)
                return;
            // Some patches
            response.userName = (_a = response.userObj) === null || _a === void 0 ? void 0 : _a.username;
            response.count = response.votes;
            if (response.test) {
                response.type = "TEST";
            }
            else {
                response.type = "VOTE";
            }
            response.timeStamp = (response.time || 0) * 1000; // Convert to milliseconds
            try {
                await fn(response, req, res, next);
                if (res.headersSent) {
                    res.sendStatus(204);
                }
            }
            catch (err) {
                console.error(err);
                res.sendStatus(500);
            }
        };
    }
    middleware() {
        return async (req, res, next) => {
            const response = await this._parseRequest(req, res);
            if (!response)
                return;
            res.sendStatus(204);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore deprecated unsafe assignment
            req.vote = response;
            next();
        };
    }
}
exports.Webhook = Webhook;
